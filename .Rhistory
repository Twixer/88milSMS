install.packages(“devtools”)
install.packages("devtools")
install.packages("magrittR")
install.packages("magrittr")
install.packages("amelia")
install.packages("Amelia")
install.packages("dplyr")
install.packages("rJava")
install.packages("ggplot2")
install.packages("xtable")
install.packages("xlsx")
install.packages("gplots")
install.packages("ProjectTemplate")
install.packages("microbenchmark")
# get the latest installr package:
if (!require('devtools')) install.packages('devtools'); require('devtools')
install_github('installr', 'talgalili')
require(installr)
# read the data (this will take a LOOOONG time)
RStudio_CRAN_data_folder 0)
RStudio_CRAN_data_folder (0)
require(installr)
RStudio_CRAN_data_folder (0)
mode(package_ip_id) <- "numeric"
library("installr", lib.loc="F:/dev/R/R-3.1.1/library")
R_version_in_a_folder
R_version_in_a_folder()
download_RStudio_CRAN_data()
setwd("F:/applis/workspace-r")
download_RStudio_CRAN_data(START = 1, log_folder = "/")
download_RStudio_CRAN_data(log_folder = "/")
download_RStudio_CRAN_data(log_folder = "./")
mode(package_ip_id) <- "numeric"
close()
close.connection()
close.socket()
close()
closeAllConnections()
if (!require('magrittr')) install.packages("magrittr")
if (!require('Amelia')) install.packages("Amelia")
# package ‘Rcpp’ successfully unpacked and MD5 sums checked
# package ‘RcppArmadillo’ successfully unpacked and MD5 sums checked
# package ‘Amelia’ successfully unpacked and MD5 sums checked
if (!require('dplyr')) install.packages("dplyr")
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
suppressPackageStartupMessages()
if (!require('devtools'), suppressPackageStartupMessages= T)  install.packages("devtools")
if (!require('devtools', suppressPackageStartupMessages= T)  install.packages("devtools")
if (!require('devtools', suppressPackageStartupMessages=T))  install.packages("devtools")
if (!require('devtools', quietly = F))  install.packages("devtools")
source.with.encoding('F:/applis/workspace-r/scripts/startup.R', encoding='UTF-8', echo=TRUE)
library('rJava')
Sys.getenv("JAVA_HOME")
java.home <- Sys.getenv("JAVA_HOME")
paste0(java.home, "jre")
java.home.jre <- jpaste0(java.home, "jre")
java.home.jre <- paste0(java.home, "jre")
Sys.setenv(java.home.jre)
Sys.setenv(c("JAVA_HOME", java.home.jre))
Sys.setenv("JAVA_HOME", java.home.jre)
Sys.setenv("JAVA_HOME"=java.home.jre)
library('rJava')
grep("jre", java.home)
grep("jre", java.home.jre)
if (grep("jre", java.home) == 0) message("no JRE")
if (length(grep("jre", java.home)) == 0) message("no JRE")
if (length(grep("jre", java.home.jre)) == 0) message("JRE")
if (length(grep("jre", java.home.jre)) == 1) message("JRE")
source('F:/applis/workspace-r/scripts/add_jre_to_java_home.R', echo=TRUE)
add.jre.to.java.home()
Sys.setenv("JAVA_HOME", "java.home.jre"D:\dev\jdk\jdk1.7.0_07\")
Sys.setenv("JAVA_HOME"="java.home.jre"D:\dev\jdk\jdk1.7.0_07\")
Sys.setenv("JAVA_HOME"="D:\dev\jdk\jdk1.7.0_07\")
Sys.setenv("JAVA_HOME"="D:\\dev\\jdk\\jdk1.7.0_07\\")
add.jre.to.java.home()
savehistory("F:/applis/workspace-r/.Rhistory")
library("xlsx")
add.jre.to.java.home()
source('F:/applis/workspace-r/scripts/add_jre_to_java_home.R', echo=TRUE)
add.jre.to.java.home()
citation()
# install.packages('devtools')
library(devtools)
install_github("qdap", "trinker")
library("qdapRegex", lib.loc="F:/dev/R/R-3.1.1/library")
detach("package:qdapRegex", unload=TRUE)
library("qdapRegex", lib.loc="F:/dev/R/R-3.1.1/library")
install.packages("qdap")
library(wordcloud); library(qdap); library(plotrix)
source('F:/applis/workspace-r/scripts/add_jre_to_java_home.R', echo=TRUE)
add.jre.to.java.home
add.jre.to.java.home()
library(wordcloud); library(qdap); library(plotrix)
packs <- c("XML", "devtools", "RCurl")
success <- suppressWarnings(sapply(packs, require, character.only = TRUE))
success
install.packages(names(success)[!success])
names(success)[!success]
install.packages("pacman")
install_github("pacman", "trinker")
url_dl(pres.deb1.docx)
data()
data("pres_debate_raw2012")
str(pres_debate_raw2012)
View(pres_debate_raw2012)
dat1 <- pres_debate_raw2012
dat1$dialogue <- qprep(dat1$dialogue)
# view a truncated version of the data (see also htruncdf)
left.just(htruncdf(dat1, 10, 45))
library(wordcloud); library(qdap); library(plotrix)
left.just(htruncdf(dat1, 10, 45))
left_just(htruncdf(dat1, 10, 45))
word.freq <- with(dat1, wfdf(dialogue, person))[, -2]
csums <- colSums(word.freq[, -1])
conv.fact <- csums[2]/csums[1]
word.freq$ROMNEY2 <- word.freq[, "ROMNEY"] * conv.fact
# colSums(word.freq[, -1])
word.freq[, "total"] <- rowSums(word.freq[, -1])
word.freq$continum <- with(word.freq, ROMNEY2 - OBAMA)
word.freq <- word.freq[word.freq$total != 0, ]  #remove Leher only words
MAX <- max(word.freq$continum[!is.infinite(word.freq$continum)])
word.freq$continum <- ifelse(is.infinite(word.freq$continum), MAX, word.freq$continum)
conv.fact2 <- abs(range(word.freq$continum))
conv.fact2 <- max(conv.fact2)/min(conv.fact2)
word.freq$continum <- ifelse(word.freq$continum > 0, word.freq$continum * conv.fact2,
word.freq$continum)
cuts <- c(-50, -25, -15, -10, -5, -2.5, -1.5, -1, -0.5, -0.25)
cuts <- sort(c(cuts, 0, abs(cuts)))
word.freq$fill.var <- cut(word.freq$continum, breaks = cuts)
head(word.freq, 10)
colfunc <- colorRampPalette(c("red", "blue"))
word.freq$colors <- lookup(word.freq$fill.var,
levels(word.freq$fill.var), rev(colfunc(length(levels(word.freq$fill.var)))))
head(word.freq, 10)
par(mar=c(7,1,1,1))
wordcloud(word.freq$Words, word.freq$total, colors = word.freq$colors,
min.freq = 1, ordered.colors = TRUE, random.order = FALSE, rot.per=0,
scale = c(5, .7))
# Add legend
COLS <- colfunc(length(levels(word.freq$fill.var)))
color.legend(.025, .025, .25, .04, qcv(Romney,Obama), COLS)
left_just(htruncdf(dat1, 10, 45))
setwd("F:/applis/workspace-r/88milSMS")
data <- load.data()
source("getting_cleaning_saving_data.R")
data <- load.data()
weekdays(data$timestamp)
Sys.getlocale()
local.fr <- Sys.getalocale()
local.fr <- Sys.getlocale()
local.fr
Sys.setlocale(category = "LC_TIME", locale = "us")
weekdays(data$timestamp)
Sys.setlocale(category = "LC_TIME", locale = "en")
Sys.setlocale(category = "LC_TIME", locale = "fr")
Sys.setlocale(category = "LC_TIME", locale = "FR")
Sys.setlocale(category = "LC_TIME", locale ="Frence")
Sys.setlocale(category = "LC_TIME", locale ="French")
Sys.setlocale(category = "LC_TIME", locale ="English")
weekdays(data$timestamp)
as.factor(ifelse(weekday(data$timestamp) %in% c("Saturday","Sunday"), "Weekend", "Weekday"))
as.factor(ifelse(weekdays(data$timestamp) %in% c("Saturday","Sunday"), "Weekend", "Weekday"))
data.clean$day.type <- as.factor(ifelse(weekdays(data$timestamp) %in% c("Saturday","Sunday"), "Weekend", "Weekday"))
data.clean$day.type <- as.factor(ifelse(weekdays(data.clean$timestamp) %in% c("Saturday","Sunday"), "Weekend", "Weekday"))
data.clean <- data
data.clean$day.type <- as.factor(ifelse(weekdays(data.clean$timestamp) %in% c("Saturday","Sunday"), "Weekend", "Weekday"))
format(data$timestamp, "%d")
class(format(data$timestamp, "%d"))
class(as.integer(format(data$timestamp, "%d")))
factor(as.integer(format(data$timestamp, "%d")))
data.clean$day <- factor(as.integer(format(data.clean$timestamp, "%d")))
data.clean$hour <- factor(as.integer(format(data.clean$timestamp, "%h")))
factor(as.integer(format(data.clean$timestamp, "%h")))
factor(as.integer(format(data.clean$timestamp, "%H")))
data.clean$hour <- factor(as.integer(format(data.clean$timestamp, "%H")))
"id.mobile", "timestamp", "day", "hour", "day.type", "sms")
columns <- c("id.sms",
"id.mobile",
"timestamp",
"day",
"hour",
"day.type",
"sms")
message(paste("Ordering columns :", columns, sep=" ")
)
data.clean <- data.clean[, columns]
View(data.clean)
source("getting_cleaning_saving_data.R")
data <- load.data()
getting_cleaning_saving_data.R
source("getting_cleaning_saving_data.R")
data <- load.data()
source("getting_cleaning_saving_data.R")
data <- load.data()
Sys.getlocale()
weekdays(data.clean$timestamp)
Sys.getlocale(category = "LC_TIME")
Sys.setlocale(category = "LC_TIME", locale ="FR")
Sys.setlocale(category = "LC_TIME", locale ="Frenc")
Sys.setlocale(category = "LC_TIME", locale ="French")
Sys.getlocale(category = "LC_TIME")
locale.lc_time <- Sys.getlocale(category = "LC_TIME")
Sys.setlocale(category = "LC_TIME", locale ="English")
Sys.getlocale(category = "LC_TIME")
Sys.setlocale(category = "LC_TIME", locale = locale.lc_time)
Sys.getlocale(category = "LC_TIME")
source("getting_cleaning_saving_data.R")
data <- load.data()
View(data)
boxplot(data$timestamp ~ data$id.mobile)
hist(data$timestamp,
breaks="days",
main="Histogram of SMS by day",
xlab="Days",
ylab="Frequency")
library("lattice")
xyplot(data$day)
hist(data$timestamp,
breaks="hours",
main="Histogram of SMS by hour",
xlab="Hours",
ylab="Frequency")
table(data$day)
hist(table(data$day))
hist(table(data$day), breaks = 31)
hist(table(data$day), breaks = 10)
hist(table(data$hour), breaks = 10)
plot(table(data$hour), breaks = 10)
plot(table(data$hour))
plot(table(data$hour), type="l")
plot(table(data$hour), type="h")
plot(table(data$day), type="h")
plot(table(data$hour))
source('F:/applis/workspace-r/scripts/resetPar.R', echo=TRUE)
resetPar()
plot(table(data$hour))
plot(table(data$day), type="h")
plot(table(data$hour))
analysis.per.day <- table(data$day)
analysis.per.day.type <- table(data$day.type)
barplotr(analysis.per.day.type)
barplot(analysis.per.day.type)
analysis.per.day <- table(data$day)
plot(table(data$day), main="nalysis")
plot(table(data$day), main="SMS per day", ylab="Nb of SMS")
barplot(analysis.per.day.type, main="SMS per type of day",, ylab="Nb of SMS")
plot(table(data$hour), main="SMS per hour", ylab="Nb of SMS")
plot(table(data$day), main="SMS per day", ylab="Nb of SMS")
plot(table(data$hour), main="SMS per hour", ylab="Nb of SMS")
max(analysis.per.day)
analysis.per.day
which.max(analysis.per.day)
factor(as.integer(format(data$timestamp, "%m")))
source("getting_cleaning_saving_data.R")
data <- load.data()
analysis.per.day <- table(data$month ~ data$day)
analysis.per.day <- table(data$month + data$day)
analysis.per.day <- table(data$month, data$day)
analysis.per.day
which.max(analysis.per.day)
max(analysis.per.day)
plot(table(data$day), main="SMS per day", ylab="Nb of SMS")
plot(analysis.per.day, main="SMS per day", ylab="Nb of SMS")
analysis.per.day.type <- table(data$day.type)
barplot(analysis.per.day.type, main="SMS per type of day",, ylab="Nb of SMS")
boxplot(data$timestamp ~ data$id.mobile)
